/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package webdav;

import java.awt.Desktop;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

//класс окна загрузок
//используется как для заливки так и для скачивания
//содержит прогрессбар и пару кнопок
//1) кнопка закрытия окна
//2) кнопка открытия папки с загруженным файлом (в проводнике)
//вторая кнопка становится видимой только при загрузки
//окно содержит объект класс LoadThread - поток загрузок
//в зависимости от используемого контруктора этот поток исползуется как для скачивания
//так и для загрузки
//окно загрузок создает новый клиент!!!! это нужно для возможности параллельной загрузки нескольких файлов
//и возможности получения списка файлов во время загрузки
public class LoadWindow extends javax.swing.JFrame {
    
    private LoadThread dwTh; //дескриптор потока загрузок
    private WebDAVClient wdclient; //клиент

    public LoadWindow(String server, int port, String login, String pwd) {
        wdclient = new WebDAVClient(); //иниц клиент
        //иниц коннект
            if (wdclient.initConnection(server, port)) {
                System.out.println("download client started, port: " + Integer.toString(wdclient.getSocket().getLocalPort()));
                wdclient.setAuthInfo(login, pwd); //логин пароль
                initComponents(); //функция сгенерирована
                openButton.setVisible(false); //прячем кнопку открытия
                downloadProgressBar.setStringPainted(true);
                downloadProgressBar.setMinimum(0);
                downloadProgressBar.setMaximum(100); //настраиваем прогрессбар
                
                //обработчик закрытия окна
                //закрывает клиент и ждет закрытия потока
                this.addWindowListener(new WindowAdapter(){
                    public void windowClosing(WindowEvent e){
                        System.out.println("closing download window");
                        wdclient.close();
                        try {
                            dwTh.join(); //ЖДЕМ ПОКА ЗАКРОЕТСЯ ПОТОК
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                        dispose();

                    }
                });
                openButton.setEnabled(false);
                
            }
    }
    
    //фукнция загрузки ресурса
    //параметры - какой ресурс и куда загружать
    //функция создает поток для загрузки и запускает его
    public void downloadResource(Resource r, String folder) {
        setTitle("Downloading " + r.getUrl());
        dwTh = new LoadThread(wdclient,r,folder,downloadProgressBar,openButton);
        dwTh.start();

    }
    
    //аналогично, для заливки
    //какой файл и куда заливать
    //стартует поток заливки
    public void uploadFile(File fN, String url) {
        setTitle("Uploading" + fN.getPath());
        dwTh = new LoadThread(wdclient,fN,url,downloadProgressBar);
        dwTh.start();
    }
    public LoadWindow() {
            

    }

    //код ниже был сгенерирован
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        downloadProgressBar = new javax.swing.JProgressBar();
        openButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        openButton.setText("Open Directory");
        openButton.setToolTipText("");
        openButton.setActionCommand("Open File Directory");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(openButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(closeButton)
                        .addGap(102, 102, 102))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(downloadProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(15, 15, 15))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(downloadProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(openButton)
                    .addComponent(closeButton))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//обработчик нажатия кнопки openButton
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        try {
            // TODO add your handling code here:
            Desktop.getDesktop().open(new File(System.getProperty("user.dir")));
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_openButtonActionPerformed
//обработчик кнопки закрытия
//закрываем клиент и ждем закрытия потока
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        // TODO add your handling code here:
        wdclient.close();
        try {
            dwTh.join();
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JProgressBar downloadProgressBar;
    private javax.swing.JButton openButton;
    // End of variables declaration//GEN-END:variables
}
