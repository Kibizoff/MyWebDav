/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package xmppclient;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author fix
 */
public class SendMessageWindow extends JFrame {
    String receiver;
    private volatile XMPPClient client;
    public boolean stopThread;
    /**
     * Creates new form SendMessageWindow
     */
    //public List<Message> mes;
    public SendMessageWindow(String rcvr, final XMPPClient clnt) {
        receiver = rcvr;
        client = clnt;
        stopThread = false;
        initComponents();
        this.getRootPane().setDefaultButton(jButton1);
       
        
        this.addWindowListener(new WindowAdapter(){
            public void windowClosing(WindowEvent e){
                stopThread = true;
                dispose();
            }
        });
        Thread updLogTh = new Thread(new Runnable() //отдельный поток для вывода сообщений 
        {
            public void run() //Этот метод будет выполняться в побочном потоке
            {
                List<Message> msgs = new ArrayList();
                while(true) {
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                    if (stopThread) break;
                    msgs = client.getMessagesFrom(receiver);
                    if (!msgs.isEmpty()) {
                        System.out.println("something non empty");
                        for (Message m:msgs) {
                            logArea.append(receiver+": "+m.getBody() +"\n");
                        }
                    }
                    msgs.clear();
                }
                System.out.println("receive send thread stopped");
  
            }
        });
        updLogTh.start();	//Запуск потока
        //updLogTh.s
        this.addWindowListener(new WindowAdapter(){
            public void windowClosing(WindowEvent e){
                try {
                    stopThread = true;
                    updLogTh.join();
                    dispose();
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textArea1 = new java.awt.TextArea();
        jButton1 = new javax.swing.JButton();
        logArea = new java.awt.TextArea();

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        logArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        logArea.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(textArea1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(logArea, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(logArea, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jButton1.getAccessibleContext().setAccessibleName("sendButton");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (!textArea1.getText().isEmpty()) {
            client.sendMessage(textArea1.getText(), receiver);
            logArea.append("me: " + textArea1.getText()+"\n");
            System.out.println("msg sent");
            textArea1.setText("");
            this.getRootPane().setDefaultButton(jButton1);
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private java.awt.TextArea logArea;
    private java.awt.TextArea textArea1;
    // End of variables declaration//GEN-END:variables
}
